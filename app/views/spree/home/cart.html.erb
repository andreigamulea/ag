<div class="container mx-auto p-6">
  <h1 class="text-3xl font-bold mb-6">Your Cart</h1>

  <% if @cart.line_items.empty? %>
    <p>Your cart is empty.</p>
    <%= link_to "Continue Shopping", main_app.carti_index_path, class: 'bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600' %>
  <% else %>
  <table class="w-full border-collapse">
  <thead>
    <tr>
      <th class="border p-2">Product</th>
      <th class="border p-2">Quantity</th>
      <th class="border p-2">Price</th>
      <th class="border p-2">Total</th>
      <th class="border p-2">Actions</th>
    </tr>
  </thead>
  <tbody>
    <% @cart.line_items.each do |item| %>
      <tr data-line-item-id="<%= item.id %>">
        <td class="border p-2"><%= item.product.name %></td>
        <td class="border p-2"><%= item.quantity %></td>
        <td class="border p-2"><%= number_to_currency(item.price) %></td>
        <td class="border p-2"><%= number_to_currency(item.total) %></td>
        <td class="border p-2">
          <a href="#" data-remove-line-item="<%= spree.remove_from_cart_path(item.id) %>" 
             data-line-item-id="<%= item.id %>"
             class="remove-line-item text-red-500 hover:text-red-700">
            ✕
          </a>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>
    <div class="mt-4">
      <p class="text-lg font-bold">Total: <%= number_to_currency(@cart.total) %></p>
      
      <%= link_to "Continue Shopping", main_app.carti_index_path, class: 'bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-2' %>
      <%= link_to "Proceed to Checkout", main_app.checkout_path, class: 'bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-2' %>
    </div>
  <% end %>
</div>
<script>
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.remove-line-item').forEach(link => {
    link.addEventListener('click', (event) => {
      event.preventDefault();

      const url = link.getAttribute('data-remove-line-item');
      const lineItemId = link.getAttribute('data-line-item-id');

      console.log('Removing line item:', lineItemId);
      console.log('URL:', url);

      fetch(url, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
          'Accept': 'application/json'
        }
      })
        .then(response => {
          console.log('Response status:', response.status);
          if (response.ok) {
            return response.json().then(data => {
              const row = document.querySelector(`tr[data-line-item-id="${lineItemId}"]`);
              console.log('Row found:', row);
              if (row) {
                row.remove();
                console.log('Row removed');
              } else {
                console.log('Row not found for ID:', lineItemId);
              }
              const remainingItems = document.querySelectorAll('tbody tr');
              console.log('Remaining items:', remainingItems.length);
              const cartCountElement = document.querySelector('.cart-count');
              console.log('Cart count element:', cartCountElement);
              if (cartCountElement) {
                cartCountElement.textContent = `Coș (${remainingItems.length})`;
                console.log('Cart count updated to:', cartCountElement.textContent);
              } else {
                console.log('Cart count element not found');
              }
              // Actualizează totalul în UI
              const totalElement = document.querySelector('.text-lg.font-bold');
              if (totalElement && data.order_total) {
                totalElement.textContent = `Total: ${data.order_total}`;
                console.log('Total updated to:', data.order_total);
              } else {
                console.log('Total element or order_total not found');
              }
              if (remainingItems.length === 0) {
                console.log('Cart is empty, reloading');
                window.location.reload();
              }
            });
          } else {
            alert('A apărut o eroare la ștergerea produsului.');
          }
        })
        .catch(error => {
          console.error('Fetch error:', error);
          alert('A apărut o eroare la ștergerea produsului.');
        });
    });
  });
});
</script>